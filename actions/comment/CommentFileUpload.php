<?PHPclass CommentFileUpload{    public static function message($message)    {        echo "<script type = 'text/javascript'>document.body.innerHTML = '" . $message . "';</script>";    }    public static function goError($message)    {        echo "<script type = 'text/javascript'>document.body.innerHTML = '" . $message . "';</script>";    }    public static function getExtension($str)    {        $i = strrpos($str, ".");        if (!$i) {            return "";        }        $l = strlen($str) - $i;        $ext = substr($str, $i + 1, $l);        return strtolower($ext);    }    public static function doChecks($extension, $file)    {        if (!isset($_POST['number'])) {            death("no number");            CommentFileUpload::goError("Error");            return -1;        }        if (!isset($_POST['boother'])) {            death("no boother");            CommentFileUpload::goError("Error");            return -2;        }        if (!isset($_POST['comment'])) {            death("no comment");            CommentFileUpload::goError("Error");            return -3;        }        $username = $_SESSION['username'];        define ("MAX_SIZE", "400");        $errors = 0;        CommentFileUpload::message("Checking file");        if (!$file) {            death("image was null on start");            CommentFileUpload::goError("Error");            return -5;        }        if (!CommentFileUpload::isSupportedExtension($extension)) {            CommentFileUpload::goError("Error (Bad file type)");            return -6;        }        $size = filesize($file);        if ($size > MAX_SIZE * 1024) {            CommentFileUpload::goError("Error (File too large.  Greater than " . MAX_SIZE . "kB)");            return -7;        }    }    public static function doFileUpload64($uploadedfile, $extension, $comment, $boothnum, $boother)    {        $height = 480;        $width = 640;        $sizeOk = CommentFileUpload::sizeOk($width, $height);        //TODO: Need to handle sizes other than standard webcam        //TODO: Can all size handling be dealt with clientside?        if ($sizeOk == 0) {            $commentok = upload_comment(true, $comment, $boothnum, $boother, $extension);            if (isset($commentok['success'])) {                $filenameResult = CommentFileUpload::getFilename($extension);                if (!isset($filenameResult['success'])) {                    return $filenameResult;                }                $filename = $filenameResult['success']['filename'];                file_put_contents($filename, $uploadedfile);                list($width, $height) = getimagesize($filename);                //TODO: Re-enable proportion update//                $propStatus = CommentFileUpload::updateProportionsInDatabase($height/$width);//                if (!isset($propStatus['success'])) {//                    death("Error updating proportions: ".$propStatus['error']);//                }            }            return $commentok;        }        return array(            "error" => "Unexpected error",            "errorCode" => $sizeOk        );    }    public static function updateProportionsInDatabase($prop)    {        $sql = "SELECT `pkCommentNumber`, `fkNumber`                FROM `commentstbl`                WHERE lower(`fkUsername`) = '" . $_SESSION['username'] . "'                ORDER BY `datetime` DESC LIMIT 1;";        $dblink = connect_boothDB();        $query = sql_query($sql);        if (!$query) {            return array("error" => sql_death1($sql));        }        $result = $query->fetch_array();        $commentnumber = $result['pkCommentNumber'];        $sql = "UPDATE `commentstbl` SET                    `imageHeightProp` = " . $dblink->real_escape_string($prop) . "                    WHERE `pkCommentNumber` = " . $dblink->real_escape_string($commentnumber) . ";";        $setimage = sql_query($sql);        if (!$setimage) {            death("update image in db failed");            return array("error" => sql_death1($sql));        }        return array("success" => "Updated proportions successfully");    }    public static function getFilename($extension)    {        $sql = "SELECT `hash`                    FROM `commentstbl`                    WHERE `fkUsername` = '" . $_SESSION['username'] . "'                    ORDER BY `datetime` DESC                    LIMIT 1;";        $dblink = connect_boothDB();        $query = sql_query($sql);        if (!$query) {            return array("error" => sql_death1($sql));        }        $row = $query->fetch_array();        $name = $row['hash'];        $filename = "{$_SERVER['DOCUMENT_ROOT']}/comments/" . $name . "." . $extension;        return array(            "success" => array(                "message" => "Filename parsed successfully.  See 'filename' value.",                "filename" => $filename            )        );    }    public static function sizeOk($width, $height)    {        $imageHeightProp = $height / $width;        if ($imageHeightProp > 4) {            CommentFileUpload::goError("Too tall");            return -14;        }        if ($imageHeightProp < 1 / 3) {            CommentFileUpload::goError("Too wide (" . $height . ":" . $width . ")");            return -15;        }        return 0;    }    public static function dodoFileUpload($filename, $uploadedfile, $extension, $width, $height)    {        if (!$uploadedfile) {            echo CommentFileUpload::goError("Fatal");            return -9999;        }        $newwidth = 320;        CommentFileUpload::message("Uploading file");        $imageHeightProp = $height / $width;        $newheight = ($imageHeightProp) * $newwidth;        if ($extension == "jpg" || $extension == "jpeg") {            $src = imagecreatefromjpeg($uploadedfile);        } else if ($extension == "png") {            $src = imagecreatefrompng($uploadedfile);        } else {            $src = imagecreatefromgif($uploadedfile);        }        if (!$src) {            CommentFileUpload::goError("Error");            return -9;        }        $tmp = imagecreatetruecolor($newwidth, $newheight);        if (!$tmp) {            CommentFileUpload::goError("Error");            return -10;        }        switch ($extension) {            case "png":                $background = imagecolorallocate($src, 255, 255, 255);                imagecolortransparent($src, $background);                imagealphablending($src, false);                imagesavealpha($src, true);                break;            case "gif":                $background = imagecolorallocate($src, 255, 255, 255);                imagecolortransparent($src, $background);                break;        }        imagecopyresampled($tmp, $src, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);        $created = imagejpeg($tmp, $filename, 100);        debug($filename);        debug($tmp);        debug($created);        imagedestroy($src);        imagedestroy($tmp);        CommentFileUpload::message("Upload successful!");    }    function isSupportedExtension($extension)    {        if (strtolower($extension) == "jpg" || strtolower(extension) == "jpeg") {            return true;        }        if (strtolower($extension) == "png" || strtolower(extension) == "gif") {            return true;        }        return false;    }}